import releasenotes.ReleaseNotesPlugin

import java.nio.file.Files
import java.nio.file.LinkOption

plugins {
	id 'java'
	id 'groovy'
	id 'idea'
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.dependencyManagement)
	alias(libs.plugins.graal.buildTools)
	id 'rpa-worker.functional-testing'
	id 'rpa-worker.enable-preview'
}

apply plugin: ReleaseNotesPlugin

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

springBoot {
	mainClass = "io.camunda.rpa.worker.RpaWorkerApplication"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://gitlab.com/api/v4/projects/50731191/packages/maven'
	}
	maven {
		url 'https://artifacts.camunda.com/artifactory/public'
	}
}

dependencies {
	implementation project(":rpa-worker-common")
	
	if(project.hasProperty("nativePlatform") && project.hasProperty("nativeArch"))
		runtimeOnly group: 'io.camunda.rpa', name: 'rpa-worker-static-runtime', version: staticRuntimeVersion, classifier: "${project.property("nativePlatform")}_${project.property("nativeArch")}"
	
	implementation libs.spring.boot.starter.webflux
	implementation libs.spring.boot.starter.actuator
	implementation libs.spring.boot.starter.validation
	implementation libs.springDocStarter
	
	implementation libs.prometheus.simpleclient.pushgateway
	runtimeOnly libs.micrometer.prometheus
	runtimeOnly libs.micrometer.prometheus.simpleclient

	implementation libs.camundaStarter
	implementation libs.vavr
	implementation libs.commons.exec
	implementation libs.jackson.dataFormatYaml
	implementation libs.reactiveFeign
	implementation libs.javaSemver
	implementation libs.slf4j.api
	implementation libs.caffeine
	
	runtimeOnly libs.springJsonLog
	
	if(project.hasProperty("nativePlatform") && project.property("nativePlatform") == "darwin") {
		runtimeOnly libs.netty.resolver.nativeMacOs
		runtimeOnly(variantOf(libs.netty.resolver.nativeMacOs) {
			classifier(project.property("nativeArch") == "amd64"
							? "osx-x86_64"
							: "osx-aarch_64")
		})
	}

	developmentOnly libs.spring.boot.devtools
	annotationProcessor libs.spring.boot.configurationProcessor
	
	compileOnly libs.lombok
	annotationProcessor libs.lombok

	testImplementation libs.reactor.test
	testImplementation libs.spock.core
	testImplementation libs.groovy.json
	testImplementation libs.groovy.nio

	testRuntimeOnly libs.junit.platformLauncher
	testRuntimeOnly libs.byteBuddy
	testRuntimeOnly libs.objenesis
	testRuntimeOnly group: 'io.camunda.rpa', name: 'rpa-worker-static-runtime', version: staticRuntimeVersion,  classifier: "${project.getProperties().getOrDefault("nativePlatform", "linux")}_${project.getProperties().getOrDefault("nativeArch", "amd64")}"

	functionalTestImplementation libs.spring.boot.starter.test
	functionalTestImplementation libs.spock.spring
	functionalTestImplementation libs.groovy.nio
	functionalTestImplementation libs.blockhound
	functionalTestImplementation libs.mockwebserver
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
//	testLogging.showStandardStreams = true
//	jvmArgs("-agentlib:native-image-agent=config-merge-dir=${project.rootDir}/rpa-worker-application/src/main/resources/META-INF/native-image/")
}

tasks.named("functionalTest", Test).configure { Test task ->
	task.jvmArgs("-XX:+AllowRedefinitionToAddDeleteMethods")
	
	if(System.getProperty("os.name").contains("Linux"))
		task.systemProperty("camunda.rpa.python.allow-unsupported-python", "true")
}

processAot {
	jvmArgs("-Dmanagement.prometheus.metrics.export.pushgateway.enabled=true")
}

processTestAot.enabled = false

graalvmNative {
	binaries {
		main {
			mainClass = "io.camunda.rpa.worker.RpaWorkerApplication"
			imageName = "rpa-worker_${project.version}"
			if(project.hasProperty("nativePlatform"))
				imageName = "${imageName.get()}_${project.properties.nativePlatform}"
			if (project.hasProperty("nativeArch"))
				imageName = "${imageName.get()}_${project.properties.nativeArch}"
			
			javaLauncher = javaToolchains.launcherFor {
				languageVersion = JavaLanguageVersion.of(24)
				vendor = JvmVendorSpec.GRAAL_VM
			}
			quickBuild = false
			buildArgs.add("--initialize-at-build-time=org.slf4j.jul.JDK14LoggerAdapter")
			buildArgs.add("--initialize-at-run-time=sun.net.dns.ResolverConfigurationImpl")
			buildArgs.add("--enable-preview")
			buildArgs.add("--enable-native-access=ALL-UNNAMED")
		}
	}
}

tasks.getByName("bootRun").tap { Task it ->
	it.outputs.upToDateWhen { false }
}

tasks.getByName("processAot").tap { Task it ->
	it.onlyIf {
		gradle.getStartParameter().getTaskNames().contains("nativeCompile")
	}
}

tasks.register("fixProvisionedToolchainIfNecessary") {
	
	onlyIf { ! System.properties['os.name'].contains("Windows") }

	JavaLauncher javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(24)
		vendor = JvmVendorSpec.GRAAL_VM
	}.get()
	
	doLast {
		java.nio.file.Path binDir = javaLauncher.executablePath.asFile.toPath().parent

		java.nio.file.Path nativeImagePath = binDir.resolve("native-image")
		java.nio.file.Path nativeImageConfigurePath = binDir.resolve("native-image-configure")
		
		if(Files.isRegularFile(nativeImagePath, LinkOption.NOFOLLOW_LINKS) 
				&& Files.size(nativeImagePath) != 0 
				&& Files.isExecutable(nativeImagePath)) 
			return
		
		if(Files.isSymbolicLink(nativeImagePath)
				&& Files.isRegularFile(binDir.resolve(Files.readSymbolicLink(nativeImagePath))) 
				&& Files.isExecutable(binDir.resolve(Files.readSymbolicLink(nativeImagePath))))
			return
		
		logger.quiet("Toolchain repair is necessary")
		
		Files.deleteIfExists(nativeImagePath)
		Files.deleteIfExists(nativeImageConfigurePath)
		
		Files.createSymbolicLink(nativeImagePath, binDir.resolve("../lib/svm/bin/native-image"))
		Files.createSymbolicLink(nativeImageConfigurePath, binDir.resolve("../lib/svm/bin/native-image-configure"))
	}
}
nativeCompile.dependsOn(fixProvisionedToolchainIfNecessary)

tasks.register("deletePlainJar") {
	doLast {
		java.nio.file.Path libsDir = project.layout.buildDirectory.asFile.get().toPath().resolve("libs/")
		println libsDir.toAbsolutePath()
		Files.walk(libsDir)
				.filter(Files::isRegularFile)
				.filter(p -> p.toString().contains("plain"))
				.findFirst()
				.ifPresentOrElse(Files::delete, { throw new RuntimeException("No plain jar") })
	}
}

tasks.register("zipNativeImage", Zip) {
	mustRunAfter(nativeCompile)

	archiveFileName = "${graalvmNative.binaries.main.imageName.get()}.zip"
	
	from(nativeCompile.outputs.files.singleFile) {
		exclude("*.so", "*.dll", "*.dynlib", "*.args")
	}

	from(project.layout.files("src/main/resources/META-INF/application.sample.properties")) {
		rename { "application.properties" }
	}

}

bootJar {
	if(project.hasProperty("dockerJar"))
		archiveBaseName = "${archiveBaseName.get()}-docker-${project.property("nativeArch")}"
}