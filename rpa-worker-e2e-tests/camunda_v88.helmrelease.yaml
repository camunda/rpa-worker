apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: camunda
  namespace: camunda88ch
spec:
  repo: https://helm.camunda.io
  chart: camunda-platform
  version: 13.0.0-alpha6
  targetNamespace: camunda88ch
  valuesContent: |-
    global:
    
      # Image configuration to be used in each sub chart
      image:
        # Image.repository defines the repository from which to fetch the docker images
        repository: "gcr.io/zeebe-io"
        # Image.tag defines the tag / version which should be used in the chart
        tag: SNAPSHOT
        # Image.pullPolicy defines the image pull policy which should be used https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
        pullPolicy: Always
    
      secrets:
        autoGenerated: false
    
      identity:
        auth:
          enabled: true
          issuer: "http://camunda.local/auth/realms/camunda-platform"
          publicIssuerUrl: "http://camunda.local/auth/realms/camunda-platform"
          admin:
            enabled: true
            existingSecret:
              name: "bootstrap-credentials"
          #######################
          # Management Group
          #######################
          webModeler:
            redirectUrl: "https://{{ .Values.global.ingress.host }}/modeler"
          console:
            redirectUrl: "https://{{ .Values.global.ingress.host }}"
            existingSecret:
              name: "bootstrap-credentials"
          #######################
          # Orchestration Group
          #######################
          core:
            redirectUrl: "http://camunda.local/core"
            existingSecret:
              name: "bootstrap-credentials"
          connectors:
            existingSecret:
              name: "bootstrap-credentials"
          optimize:
            redirectUrl: "https://{{ .Values.global.ingress.host }}/optimize"
            existingSecret:
              name: "bootstrap-credentials"
    
      security:
        authentication:
          method: oidc
          unprotectedApi: true
        authorizations:
          enabled: false
          
      ingress:
        enabled: true
        host: "camunda.local"
        className: "traefik"
    
    identity:
      enabled: true
      contextPath: "/identity"
      firstUser:
        existingSecret: "bootstrap-credentials"
      image:
        tag: "SNAPSHOT"
    
    identityKeycloak:
      enabled: true
      usePasswordFiles: false
      postgresql:
        auth:
          existingSecret: "bootstrap-credentials"
          secretKeys:
            adminPasswordKey: "identity-keycloak-postgresql-admin-password"
            userPasswordKey: "identity-keycloak-postgresql-user-password"
      auth:
        existingSecret: "bootstrap-credentials"
        passwordSecretKey: "identity-keycloak-admin-password"
    
    optimize:
      enabled: false
      contextPath: "/optimize"
    
    connectors:
      enabled: false
      contextPath: "/connectors"
      
    elasticsearch:
      master:
        replicaCount: 1
      resources:
        requests:
          cpu: 1m
    
    core:
      clusterSize: "1"
      replicationFactor: "1"
      contextPath: "/core"
      image:
        tag: SNAPSHOT
      #resources:
       # limits:
        #  memory: 8Gi
      ingress:
        grpc:
          enabled: false
          className: traefik
          host: "zeebe.camunda.local"
          tls:
            enabled: false
            # A wildcard certificate will be used.
            secretName: camunda-platform-zeebe-gateway
          annotations:
            external-dns.alpha.kubernetes.io/hostname: "core-{{ .Values.global.ingress.host }}"
            external-dns.alpha.kubernetes.io/ttl: "60"
      # giving access to venom to deploy a model. Given access to connectors
      # TODO: Find a way to only give connectors read access
      env:
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_0_MAPPINGID
          value: "demo-user-mapping"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_0_CLAIMNAME
          value: "preferred_username"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_0_CLAIMVALUE
          value: "demo"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_1_MAPPINGID
          value: "venom-client-mapping"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_1_CLAIMNAME
          value: "client_id"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_1_CLAIMVALUE
          value: "venom"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_2_MAPPINGID
          value: "connectors-client-mapping"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_2_CLAIMNAME
          value: "client_id"
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGS_2_CLAIMVALUE
          value: "connectors"
        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGS_0
          value: "demo-user-mapping"
        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGS_1
          value: "venom-client-mapping"
        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGS_2
          value: "connectors-client-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_MAPPINGRULEID
    #          value: "demo-user-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_CLAIMNAME
    #          value: "preferred_username"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_CLAIMVALUE
    #          value: "demo"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_1_MAPPINGRULEID
    #          value: "venom-client-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_1_CLAIMNAME
    #          value: "client_id"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_1_CLAIMVALUE
    #          value: "venom"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_MAPPINGRULEID
    #          value: "connectors-client-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_CLAIMNAME
    #          value: "client_id"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_CLAIMVALUE
    #          value: "connectors"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGRULES_0
    #          value: "demo-user-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGRULES_1
    #          value: "venom-client-mapping"
    #        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGRULES_2
    #          value: "connectors-client-mapping"
    
    client:
      clientId: core
      clientSecret: token
      authUrl: "http://{{ .Release.Namespace }}-keycloak/auth/realms/camunda-platform/protocol/openid-connect/token"
    