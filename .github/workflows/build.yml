name: Build

on:
  push: {}
  pull_request: {}
  
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    container: "ghcr.io/camunda/rpa-worker-base-image:202501291438"
    permissions:
      contents: read
      packages: write
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          add-job-summary: 'on-failure'

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew build elementTemplate
          ./gradlew deletePlainJar
          
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports
          path: rpa-worker-application/build/reports/tests/test/
          retention-days: 1
          
      - name: Upload Functional Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: functional-test-reports
          path: rpa-worker-application/build/reports/tests/functionalTest/
          retention-days: 1
      
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        if: github.ref_type == 'tag'
        with:
          name: executable-application-jar
          path: rpa-worker-application/build/libs/*.jar
          retention-days: 1
          
      - name: Upload Element Template
        uses: actions/upload-artifact@v4
        if: github.ref_type == 'tag'
        with:
          name: element-template
          path: element-template/build/*.json
          retention-days: 1
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            rpa-worker-application/build/test-results/**/*.xml
            rpa-worker-common/build/test-results/**/*.xml
  
  windows_test:
    runs-on: windows-2025
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with: 
          add-job-summary: 'never'

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew check

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports-windows
          path: rpa-worker-application/build/reports/tests/test/
          retention-days: 1

      - name: Upload Functional Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: functional-test-reports-windows
          path: rpa-worker-application/build/reports/tests/functionalTest/
          retention-days: 1

      - name: Publish Windows Re-Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
          check_name: 'Windows Test Results'
          comment_mode: 'off'
          job_summary: false
          files: |
            rpa-worker-application/build/test-results/**/*.xml

  images:
    needs: 
      - build
      - windows_test
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artefacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        with:
          platforms: linux/amd64,linux/aarch64

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/aarch64

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        
  native_linux_amd64:
    needs: 
      - build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || github.event_name == 'pull_request'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew -PnativePlatform=linux -PnativeArch=amd64 nativeCompile

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-linux-amd64
          path: rpa-worker-application/build/native/nativeCompile/rpa-worker*
          retention-days: 1
          
  native_win32_amd64:
    needs: 
      - build
      - windows_test
    runs-on: windows-2025
    if: github.ref_type == 'tag'
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew -PnativePlatform=win32 -PnativeArch=amd64 nativeCompile

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-win32-amd64
          path: rpa-worker-application/build/native/nativeCompile/rpa-worker*
          retention-days: 1

  native_darwin_amd64:
    needs:
      - build
      - windows_test
    runs-on: macos-13
    if: github.ref_type == 'tag'
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew -PnativePlatform=darwin -PnativeArch=amd64 nativeCompile

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-darwin-amd64
          path: rpa-worker-application/build/native/nativeCompile/rpa-worker*
          retention-days: 1

  native_darwin_aarch64:
    needs:
      - build
      - windows_test
    runs-on: macos-latest
    if: github.ref_type == 'tag'
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build
        run: |
          ./gradlew setVersion
          ./gradlew -PnativePlatform=darwin -PnativeArch=aarch64 nativeCompile

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-darwin-aarch64
          path: rpa-worker-application/build/native/nativeCompile/rpa-worker*
          retention-days: 1
          
  e2e:
    needs:
      - build
      - native_linux_amd64
    if: github.ref_type == 'tag' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env: 
      E2E: "1"
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Setup Camunda
        run: |
          echo "## Updating hosts"
          echo -e "127.0.0.1 \t camunda.local" | sudo tee -a /etc/hosts
          echo -e "127.0.0.1 \t zeebe.camunda.local" | sudo tee -a /etc/hosts
          
          echo "## Installing k3s"
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sudo -E sh -s
          sleep 10
          timeout 2m bash -c "while true; do k3s kubectl wait --for=condition=Ready node -l node.kubernetes.io/instance-type && break ||: ; done"
          
          echo "## Installing Camunda"
          k3s kubectl create ns camunda
          k3s kubectl apply -f rpa-worker-e2e-tests/camunda.helmrelease.yaml
          timeout 10m bash -c "while true; do k3s kubectl get pods -n camunda; k3s kubectl wait -n camunda --for=condition=Ready pod -l app=camunda-platform && break ||: ; done"
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Download Artefacts
        uses: actions/download-artifact@v4
        with:
          name: native-linux-amd64
          
      - name: Build
        run: |
          export CAMUNDA_CLIENT_AUTH_CLIENTSECRET=$(k3s kubectl get secret -n camunda camunda-zeebe-identity-secret -o jsonpath='{.data.zeebe-secret}' | base64 -d | xargs)
          export CAMUNDA_RPA_E2E_PATHTOWORKER=$(realpath rpa-worker_*_linux_amd64)
          chmod +x $CAMUNDA_RPA_E2E_PATHTOWORKER
          ./gradlew :rpa-worker-e2e-tests:check
          
      - name: Pod Logs
        if: always()
        run: |
          sudo zip -r logs.zip /var/log/pods/
          
      - name: Upload Pod Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pod-logs
          path: logs.zip
          retention-days: 1

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-reports
          path: rpa-worker-e2e-tests/build/reports/tests/test/
          retention-days: 1
          
      - name: Publish E2E Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: 'E2E Test Results'
          files: |
            rpa-worker-e2e-tests/build/test-results/**/*.xml
  
  release:
    needs:
      - images
      - native_linux_amd64
      - native_win32_amd64
      - native_darwin_amd64
      - native_darwin_aarch64
      - e2e
    if: github.ref_type == 'tag' && ! contains(github.ref_name, 'dev')
    runs-on: ubuntu-latest
    container: "ghcr.io/camunda/rpa-worker-base-image:202501291438"
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      
      - name: Download Artefacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          
      - name: Generate Release Header
        run: |
          ./gradlew setVersion
          ./gradlew generateReleaseHeader
      
      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            rpa-worker*linux_amd64
            rpa-worker*win32_amd64.exe
            rpa-worker*darwin*
            *.jar
            rpa-connector-*.json
          prerelease: ${{ contains(github.ref_name, '-') }}
          preserve_order: true
          generate_release_notes: true
          body_path: rpa-worker-application/build/releasenotes_header.md
          
      - name: Import Secrets
        if: github.ref_type == 'tag'
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/common/jenkins/downloads-camunda-cloud_google_sa_key DEV_DOWNLOAD_CENTER_GCLOUD_KEY_BYTES | GCP_CREDENTIALS_NAME;

      - name: Upload to Camunda Download Centre
        if: github.ref_type == 'tag'
        uses: camunda/infra-global-github-actions/download-center-upload@main
        with:
          gcp_credentials: ${{ steps.secrets.outputs.GCP_CREDENTIALS_NAME }}
          env: 'dev'
          version: ${{ github.ref_name }}
          artifact_file: |
            rpa-worker*linux_amd64
            rpa-worker*win32_amd64.exe
            rpa-worker*darwin*
            *.jar
            rpa-connector-*.json
            rpa-worker-application/build/hashes/*
            
    